@startuml
class UMLGeneratorApp {
+ main(args: String[]): void
}

class GraphGenerator {
- recursive: boolean
+ execute(classNames: List<String>): Graph
}

class ClassCell {
- classNode: ClassNode
- edges: List<Edge>

+ getName(): String
+ getAccess(): int
+ getFields(): List<FieldNode>
+ getMethods(): List<MethodNode>
+ getImplements(): List<ClassNode>
+ getSuper(): ClassNode
}

class Edge {
- originClass: ClassCell
- destClass: ClassCell
- relation: Relation
}

class Parser {
- wholeGraph: Graph
- patterns: Map<Pattern, Integer>
+ parseGraph(graph: Graph): List<GraphvizElement>
+ addPattern(pattern: Pattern, priority: Integer): boolean
+ remPattern(pattern: Pattern): Pattern
}
note top of Parser
  The addPattern() method checks to ensure
  there are no repeated priorities and no
  repeated patterns. Patterns will be searched
  for from lowest priority value to highest.
end note

class Graph {
- cells: List<ClassCell>
- edges: List<Edge>
}

abstract class Pattern {
- detected: Graph
+ Pattern(graphToSearch: Graph)
+ {abstract} toGraphviz(): List<GraphvizElement>
+ getDetectedGraph(): Graph
+ {abstract} detect(graphToSearch: Graph): Graph
}
note top of Pattern
  The constructor takes the Graph to parse,
  and the parsing takes place immediately
  upon instantiation
end note

abstract class PatternDecorator extends Pattern {
+ toGraphviz(): List<GraphvizElement>
+ detect(graphToSearch: Graph): Graph
}

class ColoredDecorator extends PatternDecorator {
+ toGraphviz(): List<GraphvizElement>
}

class ArrowDecorator extends PatternDecorator {
+ toGraphviz(): List<GraphvizElement>
}

class SingletonPattern extends Pattern {
+ toGraphviz(): List<GraphvizElement>
+ detect(graphToSearch: Graph): Graph
}

class AdapterPattern extends Pattern {
+ toGraphviz(): List<GraphvizElement>
+ detect(graphToSearch: Graph): Graph
}

class DecoratorPattern extends Pattern {
+ toGraphviz(): List<GraphvizElement>
+ detect(graphToSearch: Graph): Graph
}

enum Relation {
+ INHERITS
+ IMPLEMENTS
+ CONTAINS
}

abstract class GraphvizElement {
- attributes: Map<String, String>
+ addAttr(var: String, val: String): void
+ remAttr(var: String): void
+ getAttr(var: String): String
+ {abstract} toGraphviz(): String
}
note top of GraphvizElement
  The map is from a Graphviz attribute to its value.
end note

class GraphvizNode extends GraphvizElement {
- name: String
+ toGraphviz(): String
}

class GraphvizEdge extends GraphvizElement {
- fromNode: String
- toNode: String
+ toGraphviz(): String
}

class GraphvizGlobalParam extends GraphvizElement {
+ toGraphviz(): String
}

interface Exporter {
+ export(graphviz: List<GraphvizElement>): void
}

class FileExporter implements Exporter {
+ export(graphviz: List<GraphvizElement>): void
}

UMLGeneratorApp --> GraphGenerator
UMLGeneratorApp --> Parser
UMLGeneratorApp --> Exporter
GraphGenerator --> Graph
ClassCell --> Edge
Edge --> ClassCell
Edge --> Relation
Parser --> Pattern
Pattern --> Graph
PatternDecorator --> Pattern
Pattern --> GraphvizElement
Graph --> ClassCell
Graph --> Edge
Parser --> Graph
Parser --> GraphvizElement
Exporter --> GraphvizElement
@enduml
