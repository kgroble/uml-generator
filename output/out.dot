digraph uml {
rankdir = BT;
"ClassCell" [
	shape = "record",
	label = "{ClassCell|- classNode: org.objectweb.asm.tree.ClassNode\l- edges: java.util.List\l|+ \<init\>(java.lang.String): void\l+ getName(): java.lang.String\l+ getPrettyName(): java.lang.String\l+ getAccess(): int\l+ getFields(): java.util.List\l+ getMethods(): java.util.List\l+ getImplements(): java.util.List\l+ getSuper(): org.objectweb.asm.tree.ClassNode\l+ equals(java.lang.Object): boolean\l+ hasNode(org.objectweb.asm.tree.ClassNode): boolean\l+ addEdge(Edge): void\l}"
];
"Edge" [
	shape = "record",
	label = "{Edge|- originClass: ClassCell\l- destClass: ClassCell\l- relation: Edge$Relation\l|+ \<init\>(ClassCell ClassCell Edge$Relation): void\l+ getOrigin(): ClassCell\l+ getDestination(): ClassCell\l}"
];
"Exporter" [
	shape = "record",
	label = "{Exporter||+ export(java.util.List): void\l}"
];
"FileExporter" [
	shape = "record",
	label = "{FileExporter|- outFile: java.lang.String\l|+ \<init\>(java.lang.String): void\l+ export(java.util.List): void\l}"
];
"Graph" [
	shape = "record",
	label = "{Graph|- cells: java.util.List\l- edges: java.util.List\l|+ \<init\>(): void\l- \<init\>(java.util.List java.util.List): void\l+ addClass(ClassCell): boolean\l+ getCells(): java.util.List\l+ getEdges(): java.util.List\l+ addEdge(Edge): void\l+ copy(): Graph\l+ containsNode(org.objectweb.asm.tree.ClassNode): ClassCell\l}"
];
"GraphGenerator" [
	shape = "record",
	label = "{GraphGenerator|- recursive: boolean\l- access: GraphGenerator$AccessLevel\l|+ \<init\>(boolean GraphGenerator$AccessLevel): void\l+ execute(java.util.List): Graph\l}"
];
"GraphvizEdge" [
	shape = "record",
	label = "{GraphvizEdge|- fromNode: java.lang.String\l- toNode: java.lang.String\l|+ \<init\>(java.lang.String java.lang.String): void\l+ toGraphviz(): java.lang.String\l+ getIdentifier(): java.lang.String\l}"
];
"GraphvizElement" [
	shape = "record",
	label = "{GraphvizElement|# attributes: java.util.Map\l|+ \<init\>(): void\l+ addAttribute(java.lang.String java.lang.String): void\l+ removeAttribute(java.lang.String): void\l+ getAttribute(java.lang.String): java.lang.String\l+ toGraphviz(): java.lang.String\l+ getIdentifier(): java.lang.String\l+ addOrReplaceElement(java.util.List GraphvizElement): void\l# sanitizeGraphvizString(java.lang.String): java.lang.String\l}"
];
"GraphvizGlobalParams" [
	shape = "record",
	label = "{GraphvizGlobalParams||+ \<init\>(): void\l+ toGraphviz(): java.lang.String\l+ getIdentifier(): java.lang.String\l}"
];
"GraphvizNode" [
	shape = "record",
	label = "{GraphvizNode|- name: java.lang.String\l|+ \<init\>(java.lang.String): void\l+ toGraphviz(): java.lang.String\l+ getIdentifier(): java.lang.String\l}"
];
"IdentityPattern" [
	shape = "record",
	label = "{IdentityPattern||+ \<init\>(): void\l+ detect(Graph): Graph\l}"
];
"Parser" [
	shape = "record",
	label = "{Parser|- patterns: java.util.Map\l|+ \<init\>(): void\l+ parseGraph(Graph): java.util.List\l+ addPattern(Pattern java.lang.Integer): boolean\l+ removePattern(Pattern): boolean\l}"
];
"Pattern" [
	shape = "record",
	label = "{Pattern||+ \<init\>(): void\l+ toGraphviz(Graph): java.util.List\l+ detect(Graph): Graph\l- translateFieldNode(org.objectweb.asm.tree.FieldNode): java.lang.String\l- translateMethodNode(org.objectweb.asm.tree.MethodNode): java.lang.String\l- getAccessChar(int): char\l}"
];
"PatternDecorator" [
	shape = "record",
	label = "{PatternDecorator|# innerPattern: Pattern\l|+ \<init\>(Pattern): void\l+ detect(Graph): Graph\l}"
];
"UMLGeneratorApp" [
	shape = "record",
	label = "{UMLGeneratorApp||+ \<init\>(): void\l+ main(java.lang.String[]): void\l}"
];
"FileExporter" -> "Exporter"[
	style = "dashed",
	arrowhead = "onormal"
];
}
