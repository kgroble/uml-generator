digraph uml {
List [
	shape = "record",
	label = "{List||+ size(): int\l+ isEmpty(): boolean\l+ contains(java.lang.Object): boolean\l+ iterator(): java.util.Iterator\l+ toArray(): java.lang.Object[]\l+ toArray(java.lang.Object[]): java.lang.Object[]\l+ add(java.lang.Object): boolean\l+ remove(java.lang.Object): boolean\l+ containsAll(java.util.Collection): boolean\l+ addAll(java.util.Collection): boolean\l+ addAll(int java.util.Collection): boolean\l+ removeAll(java.util.Collection): boolean\l+ retainAll(java.util.Collection): boolean\l+ replaceAll(java.util.function.UnaryOperator): void\l+ sort(java.util.Comparator): void\l+ clear(): void\l+ equals(java.lang.Object): boolean\l+ hashCode(): int\l+ get(int): java.lang.Object\l+ set(int java.lang.Object): java.lang.Object\l+ add(int java.lang.Object): void\l+ remove(int): java.lang.Object\l+ indexOf(java.lang.Object): int\l+ lastIndexOf(java.lang.Object): int\l+ listIterator(): java.util.ListIterator\l+ listIterator(int): java.util.ListIterator\l+ subList(int int): java.util.List\l+ spliterator(): java.util.Spliterator\l}"
];
ArrayList [
	shape = "record",
	label = "{ArrayList|- serialVersionUID: long\l- DEFAULT_CAPACITY: int\l- EMPTY_ELEMENTDATA: java.lang.Object[]\l- DEFAULTCAPACITY_EMPTY_ELEMENTDATA: java.lang.Object[]\l  elementData: java.lang.Object[]\l- size: int\l- MAX_ARRAY_SIZE: int\l|+ \<init\>(int): void\l+ \<init\>(): void\l+ \<init\>(java.util.Collection): void\l+ trimToSize(): void\l+ ensureCapacity(int): void\l- ensureCapacityInternal(int): void\l- ensureExplicitCapacity(int): void\l- grow(int): void\l- hugeCapacity(int): int\l+ size(): int\l+ isEmpty(): boolean\l+ contains(java.lang.Object): boolean\l+ indexOf(java.lang.Object): int\l+ lastIndexOf(java.lang.Object): int\l+ clone(): java.lang.Object\l+ toArray(): java.lang.Object[]\l+ toArray(java.lang.Object[]): java.lang.Object[]\l  elementData(int): java.lang.Object\l+ get(int): java.lang.Object\l+ set(int java.lang.Object): java.lang.Object\l+ add(java.lang.Object): boolean\l+ add(int java.lang.Object): void\l+ remove(int): java.lang.Object\l+ remove(java.lang.Object): boolean\l- fastRemove(int): void\l+ clear(): void\l+ addAll(java.util.Collection): boolean\l+ addAll(int java.util.Collection): boolean\l# removeRange(int int): void\l- rangeCheck(int): void\l- rangeCheckForAdd(int): void\l- outOfBoundsMsg(int): java.lang.String\l+ removeAll(java.util.Collection): boolean\l+ retainAll(java.util.Collection): boolean\l- batchRemove(java.util.Collection boolean): boolean\l- writeObject(java.io.ObjectOutputStream): void\l- readObject(java.io.ObjectInputStream): void\l+ listIterator(int): java.util.ListIterator\l+ listIterator(): java.util.ListIterator\l+ iterator(): java.util.Iterator\l+ subList(int int): java.util.List\l  subListRangeCheck(int int int): void\l+ forEach(java.util.function.Consumer): void\l+ spliterator(): java.util.Spliterator\l+ removeIf(java.util.function.Predicate): boolean\l+ replaceAll(java.util.function.UnaryOperator): void\l+ sort(java.util.Comparator): void\l  access$100(java.util.ArrayList): int\l  \<clinit\>(): void\l}"
];
}
